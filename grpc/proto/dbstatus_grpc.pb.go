// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/dbstatus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseStatusServiceClient is the client API for DatabaseStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseStatusServiceClient interface {
	SendStatus(ctx context.Context, in *DatabaseStatus, opts ...grpc.CallOption) (*DatabaseStatusResponse, error)
}

type databaseStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseStatusServiceClient(cc grpc.ClientConnInterface) DatabaseStatusServiceClient {
	return &databaseStatusServiceClient{cc}
}

func (c *databaseStatusServiceClient) SendStatus(ctx context.Context, in *DatabaseStatus, opts ...grpc.CallOption) (*DatabaseStatusResponse, error) {
	out := new(DatabaseStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.DatabaseStatusService/SendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseStatusServiceServer is the server API for DatabaseStatusService service.
// All implementations must embed UnimplementedDatabaseStatusServiceServer
// for forward compatibility
type DatabaseStatusServiceServer interface {
	SendStatus(context.Context, *DatabaseStatus) (*DatabaseStatusResponse, error)
	mustEmbedUnimplementedDatabaseStatusServiceServer()
}

// UnimplementedDatabaseStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseStatusServiceServer struct {
}

func (UnimplementedDatabaseStatusServiceServer) SendStatus(context.Context, *DatabaseStatus) (*DatabaseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStatus not implemented")
}
func (UnimplementedDatabaseStatusServiceServer) mustEmbedUnimplementedDatabaseStatusServiceServer() {}

// UnsafeDatabaseStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseStatusServiceServer will
// result in compilation errors.
type UnsafeDatabaseStatusServiceServer interface {
	mustEmbedUnimplementedDatabaseStatusServiceServer()
}

func RegisterDatabaseStatusServiceServer(s grpc.ServiceRegistrar, srv DatabaseStatusServiceServer) {
	s.RegisterService(&DatabaseStatusService_ServiceDesc, srv)
}

func _DatabaseStatusService_SendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseStatusServiceServer).SendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DatabaseStatusService/SendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseStatusServiceServer).SendStatus(ctx, req.(*DatabaseStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseStatusService_ServiceDesc is the grpc.ServiceDesc for DatabaseStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DatabaseStatusService",
	HandlerType: (*DatabaseStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendStatus",
			Handler:    _DatabaseStatusService_SendStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dbstatus.proto",
}

// ClientInfoServiceClient is the client API for ClientInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientInfoServiceClient interface {
	GetClientInfo(ctx context.Context, in *ClientInfoRequest, opts ...grpc.CallOption) (*ClientInfoResponse, error)
}

type clientInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientInfoServiceClient(cc grpc.ClientConnInterface) ClientInfoServiceClient {
	return &clientInfoServiceClient{cc}
}

func (c *clientInfoServiceClient) GetClientInfo(ctx context.Context, in *ClientInfoRequest, opts ...grpc.CallOption) (*ClientInfoResponse, error) {
	out := new(ClientInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ClientInfoService/GetClientInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientInfoServiceServer is the server API for ClientInfoService service.
// All implementations must embed UnimplementedClientInfoServiceServer
// for forward compatibility
type ClientInfoServiceServer interface {
	GetClientInfo(context.Context, *ClientInfoRequest) (*ClientInfoResponse, error)
	mustEmbedUnimplementedClientInfoServiceServer()
}

// UnimplementedClientInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientInfoServiceServer struct {
}

func (UnimplementedClientInfoServiceServer) GetClientInfo(context.Context, *ClientInfoRequest) (*ClientInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfo not implemented")
}
func (UnimplementedClientInfoServiceServer) mustEmbedUnimplementedClientInfoServiceServer() {}

// UnsafeClientInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientInfoServiceServer will
// result in compilation errors.
type UnsafeClientInfoServiceServer interface {
	mustEmbedUnimplementedClientInfoServiceServer()
}

func RegisterClientInfoServiceServer(s grpc.ServiceRegistrar, srv ClientInfoServiceServer) {
	s.RegisterService(&ClientInfoService_ServiceDesc, srv)
}

func _ClientInfoService_GetClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientInfoServiceServer).GetClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClientInfoService/GetClientInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientInfoServiceServer).GetClientInfo(ctx, req.(*ClientInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientInfoService_ServiceDesc is the grpc.ServiceDesc for ClientInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClientInfoService",
	HandlerType: (*ClientInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientInfo",
			Handler:    _ClientInfoService_GetClientInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dbstatus.proto",
}
