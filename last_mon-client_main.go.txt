项目mon最新的`cmd/mon-client/main.go`文件如下, 请保存,后续更新以此为基础
```
// cmd/mon-client/main.go
/*
这里的代码首先通过getClientInfo函数从gRPC服务器获取客户端的数据库信息，然后使用这些信息来构建DSN。
接下来，它检查数据库的状态，并将检查的结果发送到gRPC服务器
*/

package main

import (
	"context"
	"fmt"
	"log"
	"mon/db"
	"mon/grpc/proto"
	"os"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// getClientInfo retrieves client's database configuration from the gRPC server using dbType.
func getClientInfo(serverIP, dbTypeReq string) (ip string, port int32, dbType, dbName, dbUser, userPwd string, err error) {
	conn, err := grpc.Dial(fmt.Sprintf("%s:5051", serverIP), grpc.WithInsecure())
	if err != nil {
		return "", 0, "", "", "", "", err
	}
	defer conn.Close()

	c := proto.NewClientInfoServiceClient(conn)
	// response, err := c.GetClientInfo(context.Background(), &proto.ClientInfoRequest{DbType: dbTypeReq}) // Using DbType instead of IP
	response, err := c.GetClientInfo(context.Background(), &proto.ClientInfoRequest{DbType: dbTypeReq})
	if err != nil {
		return "", 0, "", "", "", "", err
	}

	return response.Ip, response.Port, response.DbType, response.DbName, response.DbUser, response.UserPwd, nil
}

func main() {
	if len(os.Args) < 2 {
		log.Fatalf("Usage: %s <server IP>", os.Args[0])
	}

	serverIP := os.Args[1]

	// Sample DbType to request. Adjust as needed.
	dbTypeReq := "ORACLE"

	// 1. Retrieve configurations from the gRPC server using dbType
	ip, port, dbType, dbName, dbUser, userPwd, err := getClientInfo(serverIP, dbTypeReq)
	if err != nil {
		log.Fatalf("Failed to retrieve configuration: %v", err)
	}

	DSN := fmt.Sprintf(`user="%s" password="%s" connectString="%s:%d/%s" timezone=UTC`, dbUser, userPwd, ip, port, dbName)

	// 2. Perform Database Check
	status, details, err := db.CheckDatabaseStatus(DSN)
	if status == "" || err != nil {
		log.Fatalf("Failed to get database status. Error: %v", err)
	}

	// 3. Prepare message to send
	msg := &proto.DatabaseStatus{
		Status:    status,
		Details:   details,
		Ip:        ip,
		Dbtype:    dbType,
		Dbnm:      dbName,
		Timestamp: timestamppb.Now(),
	}

	// Adjust the timestamp to consider local timezone
	localNow := time.Now().In(time.Local)
	msg.Timestamp = timestamppb.New(localNow)

	// 4. Send the message to the gRPC server
	conn, err := grpc.Dial(fmt.Sprintf("%s:5051", serverIP), grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := proto.NewDatabaseStatusServiceClient(conn)

	response, err := c.SendStatus(context.Background(), msg)
	if err != nil {
		log.Fatalf("could not send status: %v", err)
	}
	log.Printf("Response from server: %s", response.Message)
}

```